import sys
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QComboBox, QLabel, QVBoxLayout, 
    QWidget, QPushButton, QTextEdit, QHBoxLayout, QLineEdit, QFormLayout,
    QCheckBox
)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QFont
import json
import mqtt_interaction


with open("config.json", encoding="utf-8") as f:
    config = json.load(f)

current_server_id = 0


class StationInterface(QMainWindow):
    def __init__(self):
        super().__init__()
        self.stations_data = None

        self.setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏—è–º–∏ ‚Äî WISH")
        cp = self.screen().availableGeometry().center()
        WINDOW_WIDTH = 400
        WINDOW_HEIGHT = 500
        self.setGeometry(cp.x() - WINDOW_WIDTH // 2, cp.y() - WINDOW_HEIGHT // 2, WINDOW_WIDTH, WINDOW_HEIGHT)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout()
        main_widget.setLayout(layout)
        
        # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        self.server_label = QLabel(f"–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä:")
        self.server_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        server_combo_box = QComboBox()
        server_combo_box.addItems(map(lambda el: el["name"], config["servers"]))
        server_combo_box.currentTextChanged.connect(self.change_server)
        self.connect_to_server(0)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏
        station_input_layout = QFormLayout()
        self.station_input = QLineEdit()
        self.station_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏")
        self.station_input.textChanged.connect(self.validate_inputs)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞
        station_input_layout.addRow("–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏:", self.station_input)

        # –†–∞–∑–¥–µ–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è —è—á–µ–µ–∫
        slots_label = QLabel("–°–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫:")
        self.slots_display = QTextEdit()
        self.slots_display.setReadOnly(True)
        font = QFont("Courier New", 10)
        self.slots_display.setFont(font)
        self.update_slots_display()

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —è—á–µ–π–∫–∏
        slot_input_layout = QFormLayout()
        self.slot_input = QLineEdit()
        self.slot_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏")
        self.slot_input.textChanged.connect(self.validate_inputs)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞
        slot_input_layout.addRow("–ù–æ–º–µ—Ä —è—á–µ–π–∫–∏:", self.slot_input)

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è Pro —Ä–µ–∂–∏–º–∞
        self.pro_mode_checkbox = QCheckBox("Pro-—Ä–µ–∂–∏–º", self)
        self.pro_mode_checkbox.toggled.connect(self.validate_inputs)
        self.pro_mode_checkbox.setChecked(False)


        # –†–∞–∑–¥–µ–ª –∫–Ω–æ–ø–æ–∫
        button_layout = QHBoxLayout()
        self.take_umbrella_button = QPushButton("–í–∑—è—Ç—å –∑–æ–Ω—Ç")
        self.put_umbrella_button = QPushButton("–ü–æ–ª–æ–∂–∏—Ç—å –∑–æ–Ω—Ç")
        self.take_umbrella_button.setEnabled(False)  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.put_umbrella_button.setEnabled(False)
        
        self.take_umbrella_button.clicked.connect(self.take_umbrella)
        self.put_umbrella_button.clicked.connect(self.put_umbrella)

        button_layout.addWidget(self.take_umbrella_button)
        button_layout.addWidget(self.put_umbrella_button)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π layout
        layout.addWidget(self.server_label)
        layout.addWidget(server_combo_box)
        layout.addSpacing(10)
        layout.addLayout(station_input_layout)
        layout.addWidget(slots_label)
        layout.addWidget(self.slots_display)
        layout.addSpacing(10)
        layout.addLayout(slot_input_layout)
        layout.addWidget(self.pro_mode_checkbox)
        layout.addLayout(button_layout)

        # –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é self.update_slots_display() –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_slots_display)
        self.timer.start(500)


    def connect_to_server(self, server_id):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ –µ–≥–æ ID."""
        server = config["servers"][server_id]
        mqtt_interaction.connect(server["host"], server["port"], server["username"], server["password"], self.update_stations_data)


    def change_server(self, server):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å."""
        global current_server_id
        current_server_id = config["servers"].index(next(filter(lambda el: el["name"] == server, config["servers"])))
        print(f"–í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {server} - {current_server_id}")
        self.connect_to_server(current_server_id)


    def update_slots_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —è—á–µ–µ–∫."""
        
        if self.stations_data is None or self.station_input.text() == "":
            self.slots_display.setText("")
            return
        if not self.station_input.text().isdigit():
            self.slots_display.setText("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏")
            return
        
        display_text = ""
        station_id = int(self.station_input.text())
        if station_id not in self.stations_data:
            self.slots_display.setText("–î–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        for slot_id in self.stations_data[station_id]:
            try:
                slot = self.stations_data[station_id][slot_id]
                lock = ""
                if slot["lock"] == "closed":
                    lock = "‚≠ï–∑–∞–∫—Ä—ã—Ç–∞"
                elif slot["lock"] == "opened":
                    lock = "üü¢–æ—Ç–∫—Ä—ã—Ç–∞"
                elif slot["lock"] == "close":
                    lock = "‚åõ–∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è"
                elif slot["lock"] == "open":
                    lock = "‚åõ–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è"
                
                display_text += f"–Ø—á–µ–π–∫–∞ {slot_id : >2}: {lock}, {'‚òÇÔ∏è–µ—Å—Ç—å –∑–æ–Ω—Ç' if slot['has_umbrella'] == 'y' else '‚ùå–Ω–µ—Ç –∑–æ–Ω—Ç–∞'}\n"
            except KeyError:
                display_text += f"–Ø—á–µ–π–∫–∞ {slot_id : >2}: üìÇ–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
        
        self.slots_display.setText(display_text)


    def validate_inputs(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –≤–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏."""
        station = self.station_input.text()
        slot = self.slot_input.text()
        
        if self.pro_mode_checkbox.isChecked():
            self.take_umbrella_button.setEnabled(True)
            self.put_umbrella_button.setEnabled(True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–±–∞ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        if not (station.isdigit() and slot.isdigit()):
            self.take_umbrella_button.setEnabled(False)
            self.put_umbrella_button.setEnabled(False)
            return
        
        station = int(station)
        slot = int(slot)

        if not (station in self.stations_data and slot in self.stations_data[station]):
            self.take_umbrella_button.setEnabled(False)
            self.put_umbrella_button.setEnabled(False)
            return
        
        if self.stations_data[station][slot]["lock"] == "opened":
            if self.stations_data[station][slot]["has_umbrella"] == "y":
                self.take_umbrella_button.setEnabled(True)
                self.put_umbrella_button.setEnabled(False)
            else:
                self.take_umbrella_button.setEnabled(False)
                self.put_umbrella_button.setEnabled(True)
        else:
            self.take_umbrella_button.setEnabled(False)
            self.put_umbrella_button.setEnabled(False)


    def take_umbrella(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∑—è—Ç—å –∑–æ–Ω—Ç'."""
        station = self.station_input.text()
        slot = self.slot_input.text()
        print(f"–ë–µ—Ä–µ–º –∑–æ–Ω—Ç: –°—Ç–∞–Ω—Ü–∏—è {station}, –Ø—á–µ–π–∫–∞ {slot}")
        mqtt_interaction.take_umbrella(int(station), int(slot))
    
    def put_umbrella(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª–æ–∂–∏—Ç—å –∑–æ–Ω—Ç'."""
        station = self.station_input.text()
        slot = self.slot_input.text()
        print(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–æ–Ω—Ç: –°—Ç–∞–Ω—Ü–∏—è {station}, –Ø—á–µ–π–∫–∞ {slot}")
        mqtt_interaction.put_umbrella(int(station), int(slot))
    

    def update_stations_data(self, data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π."""
        self.stations_data = data
        self.validate_inputs()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = StationInterface()
    window.show()
    sys.exit(app.exec())
